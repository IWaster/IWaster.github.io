{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://IWaster.github.io/root","root":"/root/"},"pages":[{"title":"关于","date":"2021-07-07T06:10:32.996Z","updated":"2021-05-31T02:54:50.000Z","comments":false,"path":"about/index.html","permalink":"https://iwaster.github.io/root/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2021-07-07T09:19:47.385Z","updated":"2021-05-31T02:54:50.000Z","comments":false,"path":"categories/index.html","permalink":"https://iwaster.github.io/root/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-07-07T07:29:33.689Z","updated":"2021-05-31T02:54:50.000Z","comments":true,"path":"links/index.html","permalink":"https://iwaster.github.io/root/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-07-07T06:10:33.045Z","updated":"2021-05-31T02:54:50.000Z","comments":false,"path":"tags/index.html","permalink":"https://iwaster.github.io/root/tags/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2021-07-07T06:10:32.992Z","updated":"2021-05-31T02:54:50.000Z","comments":false,"path":"/404.html","permalink":"https://iwaster.github.io/root/404.html","excerpt":"","text":""}],"posts":[{"title":"Hello Word","slug":"hello-world","date":"2021-07-07T06:05:08.768Z","updated":"2021-07-07T06:58:05.507Z","comments":true,"path":"2021/07/07/hello-world/","link":"","permalink":"https://iwaster.github.io/root/2021/07/07/hello-world/","excerpt":"","text":"大家好hello https://hexo.io/docs/one-command-deployment.html)","categories":[],"tags":[]},{"title":"单例","slug":"单例","date":"2019-11-05T06:34:15.000Z","updated":"2021-07-07T09:03:35.628Z","comments":true,"path":"2019/11/05/单例/","link":"","permalink":"https://iwaster.github.io/root/2019/11/05/%E5%8D%95%E4%BE%8B/","excerpt":"","text":"简介单例模式是一种常用的软件设计模式，其定义是单例对象的类只能允许一个实例存在。 许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。 基本的实现思路单例模式要求类能够有返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）。 单例的实现主要是通过以下两个步骤： 将该类的构造方法定义为私有方法，这样其他处的代码就无法通过调用该类的构造方法来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例； 在该类内提供一个静态方法，当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用。 注意事项单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。 单例模式的八种写法1、饿汉式（静态常量）[可用]12345678910111213141516package club.ouka.controller;/* *club.ouka.controller *@author Ouka *22:05 */public class Singleton &#123; private final static Singleton INSTANCE = new Singleton(); private Singleton()&#123;&#125; public static Singleton getInstance()&#123; return INSTANCE; &#125;&#125; 优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。 缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。 2、饿汉式（静态代码块）[可用]1234567891011121314151617181920package club.ouka.controller;/* *club.ouka.controller *@author Ouka *22:10 */public class Singleton &#123; private static Singleton instance; static &#123; instance = new Singleton(); &#125; private Singleton() &#123;&#125; public static Singleton getInstance() &#123; return instance; &#125;&#125; 这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。 3、懒汉式(线程不安全)12345678910111213141516171819package club.ouka.controller;/* *club.ouka.controller *@author Ouka *22：19 */public class Singleton &#123; private static Singleton singleton; private Singleton() &#123;&#125; public static Singleton getInstance() &#123; if (singleton == null) &#123; singleton = new Singleton(); &#125; return singleton; &#125;&#125; 这种写法起到了Lazy Loading的效果，但是只能在单线程下使用。如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。 4、懒汉式(线程安全，同步方法)12345678910111213141516171819package club.ouka.controller;/* *club.ouka.controller *@author Ouka *22:23 */public class Singleton &#123; private static Singleton singleton; private Singleton() &#123;&#125; public static synchronized Singleton getInstance() &#123; if (singleton == null) &#123; singleton = new Singleton(); &#125; return singleton; &#125;&#125; 解决上面第三种实现方式的线程不安全问题，做个线程同步就可以了，于是就对getInstance()方法进行了线程同步。 缺点：效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步效率太低要改进。 5、懒汉式(线程安全，同步代码块)123456789101112131415161718192021package club.ouka.controller;/* *club.ouka.controller *@author Ouka *22:30 */public class Singleton &#123; private static Singleton singleton; private Singleton() &#123;&#125; public static Singleton getInstance() &#123; if (singleton == null) &#123; synchronized (Singleton.class) &#123; singleton = new Singleton(); &#125; &#125; return singleton; &#125;&#125; 由于第四种实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。但是这种同步并不能起到线程同步的作用。跟第3种实现方式遇到的情形一致，假如一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。 6、双重检查1234567891011121314151617181920212223package club.ouka.controller;/* *club.ouka.controller *@author Ouka *22:38 */public class Singleton &#123; private static volatile Singleton singleton; private Singleton() &#123;&#125; public static Singleton getInstance() &#123; if (singleton == null) &#123; synchronized (Singleton.class) &#123; if (singleton == null) &#123; singleton = new Singleton(); &#125; &#125; &#125; return singleton; &#125;&#125; Double-Check概念对于多线程开发者来说不会陌生，如代码中所示，我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象。 优点：线程安全；延迟加载；效率较高。 7、静态内部类123456789101112131415161718package club.ouka.controller;/* *club.ouka.controller *@author Ouka *22:40 */public class Singleton &#123; private Singleton() &#123;&#125; private static class SingletonInstance &#123; private static final Singleton INSTANCE = new Singleton(); &#125; public static Singleton getInstance() &#123; return SingletonInstance.INSTANCE; &#125;&#125; 这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要Singleton类被装载就会实例化，没有Lazy-Loading的作用，而静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。 类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。 优点：避免了线程不安全，延迟加载，效率高。 8、枚举([Effective Java]推荐)1234567891011package club.ouka.controller;/* *club.ouka.controller *@author Ouka *22:44 */public enum Singleton &#123; INSTANCE;&#125; 系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。 当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法","categories":[{"name":"hexo","slug":"hexo","permalink":"https://iwaster.github.io/root/categories/hexo/"}],"tags":[{"name":"hexo主题","slug":"hexo主题","permalink":"https://iwaster.github.io/root/tags/hexo%E4%B8%BB%E9%A2%98/"}]}],"categories":[{"name":"hexo","slug":"hexo","permalink":"https://iwaster.github.io/root/categories/hexo/"}],"tags":[{"name":"hexo主题","slug":"hexo主题","permalink":"https://iwaster.github.io/root/tags/hexo%E4%B8%BB%E9%A2%98/"}]}